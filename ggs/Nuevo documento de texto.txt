import os
import PySimpleGUI as sg
import tkinter as tk
from termcolor import colored
from tkinter import *
from pythonping import ping
import subprocess
import time
import socket
import netifaces

 

sg.theme('Light Green 5')
# sg.ChangeLookAndFeel('GreenTan')

 
# ------ Menu Definition ------ #
menu_def = [['&File', ['&Open', '&Save', 'E&xit', 'Properties']],
            ['&Edit', ['Paste', ['Special', 'Normal', ], 'Undo'], ],
            ['&Help', '&About...'], ]

 
# ------ Column Definition ------ #

 
colum1 = [
    [sg.Frame(layout=[
        [sg.Radio('BRM-10', "RADIO1", default=True, size=(16, 1), key="-IN1-")],
        [sg.Radio('CI-5  [RBW-50]', "RADIO1", default=True, size=(16, 1), key="-IN2-"),
        sg.Radio('[RCW-50]', "RADIO1", default=True, size=(16, 1), key="-IN3-")],
        [sg.Radio('CI-10B [RBW-100]', "RADIO1", default=True, size=(16, 1), key="-IN4-")
         ,sg.Radio('CI-10C [RCW-100]', "RADIO1", default=True, size=(16, 1), key="-IN5-")],
         [sg.Radio('CI-100  [SDRB-100]', "RADIO1", default=True, size=(16, 1), key="-IN6-"),
        sg.Radio('[SDRC-100]', "RADIO1", default=True, size=(16, 1), key="-IN7-")]],
        title='Machine', title_color='#00226F', relief=sg.RELIEF_SUNKEN)]]

 

       

 

colum2 = [
    [sg.Frame('Option ', [[sg.Radio('RAS TEST', "RADIO2", key="-IN9-"),
        sg.Radio('Part LIST', "RADIO2", key="-IN10-")],
        [sg.Button('search', size=(18, 1))],
        ], title_color='#00226F', )],
      ]

 
layout = [
    [sg.Text('Part List - Ras TEST - Error Log', size=(33, 1), justification='center', text_color='#00226F',
             font=("Helvetica", 18), relief=sg.RELIEF_RIDGE)],

     [sg.Frame('ERROR LOG: [ XXXX ] ', [[sg.Input(size=(31, 1))],[sg.Button('Display Error Code')],
    [sg.Output(size=(135, 37), key='-OUTPUT-')]], title_color='#00226F', )],
    [sg.Frame('IPs Info ', [
    ], title_color='#00226F', )],
    [sg.Column(colum1), sg.Column(colum2)
     ]
]

 

def func(message):
    print(message)

 def mynet():

    import socket
    from ipaddress import ip_network as ipn
    import re
    #     i         regular expression, including the mask
    pr = re.compile(r'\d{1,3}\.\d{1,3}\.\d{1,3}\.\d{1,3}')
    # Get the gateway address by the default route, there may be a number, but only the first one [0], the third element obtained by the list of IP is looking for ip [2]
    gw = re.findall(pr, os.popen('route print | find " 0.0.0.0 "').read().strip().split('\n')[0])[2]
    #     u UDP request package, avoid brainless casual UDP package, in the intranet, get the source address of the package through the UDP IP header, that is, the unit production site
    ip = \
    [(s.connect((gw, 53)), s.getsockname()[0], s.close()) for s in [socket.socket(socket.AF_INET, socket.SOCK_DGRAM)]][
        0][1]
    # If the native IP and gateway are obtained correctly
    if ip and gw:
        cmd = 'wmic Path Win32_NetworkAdapterConfiguration get DefaultIPGateway,IPAddress,IPSubnet | find "' + ip + '"'
        # Get the gateway, IP and mask through the operating system WMIC command, in order to avoid accidental returns, only the first line of data
        nw = [i for i in os.popen(cmd).read().strip().split('\n') if i.strip()][0]
        # Looking for an IP-related character in this row, if the production network card is configured with multiple IP, multiple records are listed here
        nw = re.findall(pr, nw)
        # Judging whether the IP and gateway acquired above in this record in the IP result found in this record
        if ip in nw and gw in nw:
            #   in the first, it is determined whether it is correct, then remove the gateway from the list
            if gw == nw[0]:
                nw = nw[1:]

            else:
                return False
                #            , ip, IP, .., Mask, Mask].
                # First, find the index position of IP in NW, the IP corresponding mask index is divided by the length of the element divided by 2 and the IP index value
            mdex = int(len(nw) / 2 + nw.index(ip))
            mask = str(ipn(ip + '/' + nw[mdex], strict=False)).split('/')[-1]
            return [ip + '/' + mask, gw]
        else:

            return False
    else:

        return False

window = sg.Window('GGS in Python by Romerof', layout, default_element_size=(40, 1), grab_anywhere=False,

                   margins=(18, 18))

event, values = window.read()

 
while True:  # Event Loop

    event, values = window.Read()

    if event in (None, 'Exit'):

        break

    if (event == 'search') and (values["-IN1-"] == True) and (values["-IN9-"] == True):

        print("\n- PDF")

        window['-OUTPUT-'].update()

       

 

 

window.close()